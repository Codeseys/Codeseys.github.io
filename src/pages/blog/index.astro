---
import BaseLayout from '../../layouts/BaseLayout.astro'
import { getBlogPosts } from '../../lib/notion'
import type { BlogPost } from '../../lib/notion'

let posts: BlogPost[] = []
try {
  posts = await getBlogPosts()
} catch (error) {
  console.error('Error loading blog posts:', error)
}

function truncateDescription(
  description: string,
  maxLength: number = 150
): string {
  if (description.length <= maxLength) return description
  return description.slice(0, maxLength).trim() + '...'
}
---

<BaseLayout title="Blog | Baladithya B">
  <main class="container mx-auto px-4 py-8">
    <h1 class="mb-8 text-4xl font-bold text-gray-900 dark:text-white">
      Blog Posts
    </h1>
    {
      posts.length === 0 ? (
        <p class="text-center text-gray-600 dark:text-gray-400">
          No blog posts available at the moment.
        </p>
      ) : (
        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {posts.map((post) => (
            <div class="blog-card-container">
              <a
                href={`/blog/${post.id}`}
                class="blog-card block overflow-hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
              >
                <div class="flex h-full flex-col">
                  <h2 class="mb-2 text-xl font-semibold text-gray-900 transition-colors group-hover:text-primary dark:text-gray-100">
                    {post.title}
                  </h2>
                  <time class="mb-4 text-sm text-gray-600 dark:text-gray-400">
                    {new Date(post.createdTime).toLocaleDateString()}
                  </time>
                  <div class="description-container relative flex-grow">
                    <p class="text-gray-700 dark:text-gray-300">
                      {post.description}
                    </p>
                  </div>
                </div>
              </a>
            </div>
          ))}
        </div>
      )
    }
  </main>
</BaseLayout>

<style>
  .blog-card-container {
    position: relative;
    height: 280px;
    perspective: 1000px;
  }

  .blog-card {
    position: absolute;
    inset: 0;
    transform-style: preserve-3d;
    transition: all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .blog-card:hover {
    transform: translateY(-24px) scale(1.08);
    box-shadow: 0 30px 60px rgba(0, 0, 0, 0.25);
    z-index: 20;
  }

  .description-container {
    max-height: 4.5em;
    overflow: hidden;
    transition: max-height 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .blog-card:hover .description-container {
    max-height: 150px;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
  }

  /* Custom scrollbar for Webkit browsers */
  .description-container::-webkit-scrollbar {
    width: 6px;
  }

  .description-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .description-container::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }

  /* Dark mode adjustments */
  :global(.dark) .blog-card {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  :global(.dark) .blog-card:hover {
    box-shadow: 0 30px 60px rgba(0, 0, 0, 0.6);
  }

  :global(.dark) .blog-card:hover .description-container {
    scrollbar-color: rgba(209, 213, 219, 0.5) transparent;
  }

  :global(.dark) .description-container::-webkit-scrollbar-thumb {
    background-color: rgba(209, 213, 219, 0.5);
  }
</style>
